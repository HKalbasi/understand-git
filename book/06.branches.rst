شاخه ها
=========

شاخه ها نیز مانند برچسب ها اسامی ای هستند که به راس ها نسبت می دهیم.
اما بر خلاف برچسب ها که ثابت هستند و به یک راس خاص اشاره می کنند،
شاخه ها متحرک هستند و راسی که به آن اشاره می کنند در طول زمان تغییر
می کنند. ساخت شاخه جدید مانند ساخت برچسب جدید است::
	git branch shakhe-1
	git branch shakhe-2
هم اکنون خط اول
گراف به شکل زیر است::
	*   commit 4c6987c84c8f9118053985557be84007bf0a703b (HEAD, tag: barchasbe-2, tag: barchasbe-1, shakhe-2, shakhe-1)
تفاوتی که شاخه با برچسب دارد این است که وقتی به شاخه چک اوت می کنیم هد روی
آن شاخه قرار می گیرد و نه روی راس. اگر به شاخه یک چک اوت کنید و گراف را چاپ
کنید، می بینید که::
	*   commit 4c6987c84c8f9118053985557be84007bf0a703b (HEAD -> shakhe-1, tag: barchasbe-2, tag: barchasbe-1, shakhe-2)
هد روی شاخه ۱ قرار گرفته است. حال اگر هد به طور خودکار جابه جا شود (مثلا با کامیت کردن یا مرج کردن)
شاخه ۱ نیز هم زمان با آن جا به جا می شود. برای مثال یک فایل ۴ می سازیم و کامیت می کنیم::
	* commit 9215e6a58bac4179ac1730a3408e52fba46af82d (HEAD -> shakhe-1)
	| Author: HKalbasi <kalbasi@ce.sharif.edu>
	| Date:   Wed Jan 1 14:14:59 2020 +0330
	| 
	|     ezafe kardane file 4
	|   
	*   commit 4c6987c84c8f9118053985557be84007bf0a703b (tag: barchasbe-2, tag: barchasbe-1, shakhe-2)
	|\  Merge: 49e7677 2e3112e
	| | Author: HKalbasi <kalbasi@ce.sharif.edu>
	| | Date:   Wed Jan 1 12:30:59 2020 +0330
	| | 
	| |     merge 49e7 with 2e31
	| | 
	| * commit 2e3112eeb0771841a4927dc0b44e3964f2726a14 (master)
	| | Author: HKalbasi <kalbasi@ce.sharif.edu>
	| | Date:   Wed Jan 1 11:40:02 2020 +0330
	| | 
	| |     ezafe kardane 1 khat be salam
	| | 
	* | commit 49e76777e0799f6bcbf31e01a424a3855a4384cf
	|/  Author: HKalbasi <kalbasi@ce.sharif.edu>
	|   Date:   Wed Jan 1 12:16:45 2020 +0330
	|   
	|       ezafe kardane file3
	| 
	* commit 23ba3c4534512e852fe6b4f37ec3d7def4a6a502 (tag: barchasbe-3)
	| Author: HKalbasi <kalbasi@ce.sharif.edu>
	| Date:   Wed Jan 1 11:39:32 2020 +0330
	| 
	|     ezafe kardane file2
	| 
	* commit 910f9a3e35c75f52ec1b71fcdbc2e4bcbb83207f
	Author: HKalbasi <kalbasi@ce.sharif.edu>
	Date:   Wed Jan 1 11:12:35 2020 +0330
	
		ezafe kardane file e salam

انتقال شاخه به یک راس دیگر
-----------
می توانید یک شاخه را با دستور ``git reset --hard <hash/tag/branch>``
به یک راس دیگر انتقال دهید. تفاوت این فرمان با فرمان ``git checkout``
این است که ریست علاوه بر HEAD شاخه ای که روی آن است را نیز جابه جا می کند.


کاربرد شاخه ها
--------------
شاخه ها یکی از پر کاربرد ترین چیز ها در گیت هستند. با ایجاد شاخه به یک
محیط مجزا از پروژه دست پیدا می کنید. پروژه را روی آن محیط مجزا مستقل از
اتفاقات دیگری که روی پروژه می افتد توسعه می دهید و در نهایت تغییرات خود را
در یک شاخه اصلی تر ترکیب می کنید. می توانید برای هر قابلیت جدید که می خواهید
به پروژه استفاده کنید یک شاخه بسازید و قابلیت ها را به طور موازی جلو ببرید.
می توانید برای هر شخص یک شاخه بسازید و جداگانه روی پروژه کار کنید.
حتی می توانید یک شاخه توسعه داشته باشید که آخرین تغییرات در آن ترکیب
می شوند و هر وقت آن تغییرات به نقطه پایداری رسیدند آن را در شاخه دیگری
که اصلی تر است ترکیب کنید.

شاخه master
---------
هنگام ساخت پروژه به طور خودکار یک شاخه master به وجود می آید که HEAD نیز
روی آن قرار دارد. شاخه master ویژگی خاصی ندارد و مانند شاخه های دیگر است
اما استفاده کنندگان گیت عموما از آن به عنوان شاخه اصلی پروژه استفاده می کنند.

detached HEAD
-------------
وقتی که به یک راس یا برچسب (و نه به یک شاخه) چک اوت می کنید گیت به شما هشدار
می دهد که در وضعیت detached HEAD هستید. این هشدار به این خاطر است
که کامیت هایی که شما در این وضعیت می کنید تحت پوشش هیچ شاخه ای قرار
نمی گیرند و وقتی که HEAD را به شاخه دیگری منتقل کنید ممکن است کامیت
های شما گم شوند. همچنین کامیت هایی که از اجداد هیچ برچسب یا شاخه ای
نباشند ممکن است توسط آشغال جمع کن گیت حذف شوند.